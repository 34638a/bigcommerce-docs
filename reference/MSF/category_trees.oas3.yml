{
  "openapi": "3.0.0",
  "info": {
    "title": "Category Trees API",
    "version": "3.0.0",
    "description": "Create and manage category trees for BigCommerce stores.",
    "termsOfService": "http://www.bigcommerce.com/terms",
    "contact": {
      "name": "BigCommerce Developer Documentation",
      "url": "https://developer.bigcommerce.com/"
    }
  },
  "paths": {
    "/catalog/trees": {
      "get": {
        "summary": "Get All Category Trees",
        "description": "Returns a list of *Category Trees*.",
        "tags": [
          "Category Trees"
        ],
        "parameters": [
          {
            "name": "id:in",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id:in",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of category trees.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tree"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/MetaPaginationObject"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Upsert Category Trees",
        "description": "Upserts *Category Trees*. If a tree object contains an ID, it is processed as an update operation using that ID. If no ID is provided, a new tree is created.",
        "tags": [
          "Category Trees"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tree"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created a category tree.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Tree"
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "The Channel was not valid. See the response for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Category Trees",
        "description": "Deletes *Category Trees*. A filter must be supplied with the endpoint.",
        "tags": [
          "Category Trees"
        ],
        "parameters": [
          {
            "name": "id:in",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/catalog/trees/{tree_id}/categories": {
      "get": {
        "summary": "Get a Category Tree",
        "description": "Returns a *Category Tree*.",
        "tags": [
          "Category Trees"
        ],
        "parameters": [
          {
            "name": "tree_id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "depth",
            "description": "Max depth for a tree of categories.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categories tree",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CategoryNode"
                      }
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The tree was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/trees/{tree_id}/categories/products-count": {
      "get": {
        "summary": "Get Category Tree Products Count",
        "description": "Returns a list of objects containing products count per category for a category tree.",
        "tags": [
          "Category Tree Products Count"
        ],
        "parameters": [
          {
            "name": "tree_id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "category_ids:in",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesProductsCount"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Tree": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "minLength": 6,
            "maxLength": 255
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "CategoryNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "parent_id": {
            "type": "integer"
          },
          "depth": {
            "type": "integer"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string"
          },
          "is_visible": {
            "type": "boolean"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryNode"
            }
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "parent_id": {
            "type": "integer"
          },
          "tree_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "views": {
            "type": "integer"
          },
          "sort_order": {
            "type": "integer"
          },
          "page_title": {
            "type": "string"
          },
          "search_keywords": {
            "type": "string"
          },
          "meta_keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta_description": {
            "type": "string"
          },
          "layout_file": {
            "type": "string"
          },
          "is_visible": {
            "type": "boolean"
          },
          "default_product_sort": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "custom_url": {
            "$ref": "#/components/schemas/CustomUrl"
          }
        }
      },
      "CategoryData": {
        "type": "object",
        "properties": {
          "tree_id": {
            "type": "integer"
          },
          "parent_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "views": {
            "type": "integer"
          },
          "sort_order": {
            "type": "integer"
          },
          "page_title": {
            "type": "string"
          },
          "search_keywords": {
            "type": "string"
          },
          "meta_keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta_description": {
            "type": "string"
          },
          "layout_file": {
            "type": "string"
          },
          "is_visible": {
            "type": "boolean"
          },
          "default_product_sort": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "custom_url": {
            "$ref": "#/components/schemas/CustomUrl"
          }
        }
      },
      "CustomUrl": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "is_customized": {
            "type": "boolean"
          }
        }
      },
      "CategoriesProductsCount": {
        "type": "object",
        "description": "List of categories with the count of products in these with subcategories and without.",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryProductsCount"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaPaginationObject"
          }
        }
      },
      "CategoryProductsCount": {
        "type": "object",
        "description": "The category with the count of products in this with subcategories and without.",
        "properties": {
          "category_id": {
            "type": "integer",
            "minimum": 1
          },
          "current_count": {
            "description": "Count of products in the current category.",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "category_id",
          "current_count"
        ],
        "example": [
          {
            "category_id": 1,
            "current_count": 10
          },
          {
            "category_id": 2,
            "current_count": 10
          },
          {
            "category_id": 3,
            "current_count": 10
          }
        ]
      },
      "CategoryPositionBefore": {
        "type": "object",
        "description": "The category position is before specified category.",
        "properties": {
          "before": {
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "before"
        ],
        "example": [
          {
            "before": 10
          }
        ]
      },
      "CategoryPositionAfter": {
        "type": "object",
        "description": "The category position is after specified category.",
        "properties": {
          "after": {
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "after"
        ],
        "example": [
          {
            "after": 10
          }
        ]
      },
      "MetaPaginationObject": {
        "type": "object",
        "properties": {
          "pagination": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 246,
                "minimum": 0
              },
              "count": {
                "type": "integer",
                "example": 5,
                "minimum": 0
              },
              "per_page": {
                "type": "integer",
                "example": 5,
                "minimum": 0
              },
              "current_page": {
                "type": "integer",
                "example": 1,
                "minimum": 1
              },
              "total_pages": {
                "type": "integer",
                "example": 50,
                "minimum": 0
              },
              "links": {
                "type": "object",
                "properties": {
                  "next": {
                    "type": "string",
                    "example": "?limit=5&page=2"
                  },
                  "current": {
                    "type": "string",
                    "example": "?limit=5&page=1"
                  }
                }
              }
            }
          }
        }
      },
      "DetailedErrors": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "BaseError": {
        "type": "object",
        "description": "Error payload for the BigCommerce API.\n",
        "properties": {
          "status": {
            "description": "The HTTP status code.\n",
            "type": "integer"
          },
          "title": {
            "description": "The error title describing the particular error.\n",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "type": "object",
            "properties": {
              "errors": {
                "$ref": "#/components/schemas/DetailedErrors"
              }
            }
          }
        ]
      }
    }
  },
  "x-stoplight": {
    "docs": {
      "includeDownloadLink": false,
      "showModels": false
    }
  },
  "servers": [
    {
      "url": "https://api.bigcommerce.com/stores/{store_hash}/v3",
      "description": ""
    }
  ]
}